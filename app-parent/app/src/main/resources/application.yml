server:
  port: ${SERVER_PORT:8088}
  address: ${SERVER_ADDRESS:0.0.0.0}

spring:
  output:
    ansi:
      enabled: ALWAYS
  application:
    name: ${SPRING_APPLICATION_NAME:spring-boot-playground}

  boot:
    admin:
      client:
        url: ${SPRING_BOOT_ADMIN_CLIENT_URL:http://localhost:8081/}
        instance:
#          service-url: ${SPRING_BOOT_ADMIN_CLIENT_INSTANCE_SERVICE_URL:http://host.docker.internal:8088}
          service-url: ${SPRING_BOOT_ADMIN_CLIENT_INSTANCE_SERVICE_URL:http://${server.address}:${server.port}}
          metadata:
            tags:
              environment: ${ENVIRONMENT:local}
              version: @project.version@
              application-type: rest-api


  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/sandbox-rest-app}
    username: ${SPRING_DATASOURCE_USERNAME:sandbox-rest-app-user}
    password: ${SPRING_DATASOURCE_PASSWORD:sandbox-rest-app-user-pwd}
    driver-class-name: ${SPRING_DATASOURCE_DRIVER_CLASS_NAME:org.postgresql.Driver}
#    hikari:
#      connection-test-query: SELECT 1
#      connection-timeout:
#      idle-timeout:
#      keepalive-time:
#      validation-timeout:
#      max-lifetime:

  jpa:
    show-sql: ${SPRING_JPA_SHOW_SQL:true}    # Helpful during development to see the SQL
    generate-ddl: ${SPRING_JPA_GENERATE_DDL:false} # We want Liquibase, not Hibernate, to manage our schema
#    properties:
#      hibernate:
#        format_sql: true
        # Show values in queries instead of ?
#        type: trace
#    hibernate:
#      ddl-auto: none  # We want Liquibase, not Hibernate, to manage our schema
#    database-platform: org.hibernate.dialect.PostgreSQLDialect
  liquibase:
#    change-log: classpath:db/changelog/db.changelog-master.yaml
    change-log: ${SPRING_LIQUIBASE_CHANGE_LOG:classpath:db/changelog/db.changelog-master.xml}
    enabled: ${SPRING_LIQUIBASE_ENABLED:true}

springdoc:
  swagger-ui:
    path: ${SWAGGER_UI_PATH:/swagger-ui.html}
  show-actuator: ${SHOW_ACTUATOR:true}

playground:
  api:
    rest:
      data-generator:
        enabled: ${PLAYGROUND_API_REST_DATA_GENERATOR_ENABLED:false}
      sandbox:
        enabled: ${PLAYGROUND_API_REST_SANDBOX_ENABLED:false}

management:
  endpoint:
#    metrics:
#      enabled: true
##      enabled: false
    shutdown:
      enabled: ${MANAGEMENT_ENDPOINT_SHUTDOWN_ENABLED:false}
  endpoints:
    web:
      exposure:
#        exclude: shutdown
        include: "*"
#        include: ${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE:health,info,prometheus}
#        include: ${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE:health,info,metrics,prometheus}
  prometheus:
    metrics:
      export:
        enabled: ${MANAGEMENT_PROMETHEUS_METRICS_EXPORT_ENABLED:true}
#  security:
#    enabled: ${MANAGEMENT_SECURITY_ENABLED:false}

logging:
  level:
#    org.hibernate.SQL: DEBUG
    org.hibernate.orm.jdbc.bind: ${LOGGING_LEVEL_ORG_HIBERNATE_ORM_JDBC_BIND:TRACE}
#    org:
#      springdoc: DEBUG
