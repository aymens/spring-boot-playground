#version: '3.8'
name: "playground"
services:
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: keycloak
    depends_on:
      db:
        condition: service_healthy
    command: start-dev
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://db:5432/${KC_DB}
      KC_DB_USERNAME: ${KC_USER}
      KC_DB_PASSWORD: ${KC_PASSWORD}
      KEYCLOAK_ADMIN: ${KC_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KC_ADMIN_PASSWORD}
    ports:
      - "8082:8080"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health/ready" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  rest-api:
    build:
      context: ./app-parent/app
      dockerfile: Dockerfile
    image: rest-api
    container_name: rest-api
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8088:8088"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${APP_DB}
      SPRING_DATASOURCE_USERNAME: ${APP_USER}
      SPRING_DATASOURCE_PASSWORD: ${APP_PASSWORD}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8088/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
#    restart: unless-stopped

  sba:
    build:
      context: ./sba
      dockerfile: Dockerfile
    image: sba
    container_name: sba
    ports:
      - "8081:8081"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  db:
    image: postgres:16-alpine
#    image: postgres:16
    container_name: postgres
    environment:
      APP_USER: ${APP_USER}
      APP_PASSWORD: ${APP_PASSWORD}
      APP_DB: ${APP_DB}
      KC_USER: ${KC_USER}
      KC_PASSWORD: ${KC_PASSWORD}
      KC_DB: ${KC_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    entrypoint: [ "sh", "-c", "docker-entrypoint.sh postgres & sleep 5; /docker-entrypoint-initdb.d/init-db.sh; wait" ]

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
#  init_scripts:
#    driver: local
#    driver_opts:
#      type: none
#      device: ./scripts
#      o: bind



# docker compose restart
# docker compose down && docker compose up -d
# docker compose down -v && docker compose up -d # -v: This flag removes named volumes declared in the volumes section of the Compose file and anonymous volumes attached to containers. Using -v ensures that all volumes associated with the containers are deleted, helping to free up space and ensure a clean slate.
# docker compose down db && docker compose up -d db
# docker compose down sba && docker compose up -d sba
# docker compose down sba && docker rm -f sba && docker compose up -d --force-recreate sba
# docker compose down sba && docker rm -f sba && docker compose up -d --build --force-recreate sba